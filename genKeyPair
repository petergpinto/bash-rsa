#Generate public/private key pair and write to file

if [ $# -ne 1 ]; then
	echo "Usage: genKeyPair filename"
	exit
fi


#I will be using openssl to generate the primes for the key since I dont trust myself to generate those with sufficent randomness
#P and Q are large random primes
#choose p

echo -n "Generating prime numbers..."
p=$(openssl prime -generate -bits 8)
#choose q
q=$(openssl prime -generate -bits 8)
echo "Done"
#n is the modulus for the public and private keys
#n = p*q
n=$(bc <<< "$p * $q")

greatestCommonDivisor()
{
	if [[ $1 -gt $2 ]]; then
		a=$1
		b=$2
	else
		a=$2
		b=$1
	fi
	
	multiple=$b
	while [ $(bc <<< "$multiple != 0") -eq 1 ]; do
		x=$(bc <<< "$a % $multiple")
		y=$(bc <<< "$b % $multiple")

		if [[ $x -eq 0 ]] && [[ $y -eq 0 ]]; then
			return $multiple
		fi
		multiple=$(bc <<< "$multiple - 1")
	done
	return 1

}

leastCommonMultiple ()
{
	a=$1
	b=$2
	greatestCommonDivisor $1 $2
	num=$?
	num2=$(bc <<< "$a * $b")
	lcm=$(bc <<< "$num2 / $num")
}

#This value is kept private
#totient = leastCommonMultiple( p-1, q-1 )
echo -n "Calculating totient value..."
leastCommonMultiple $(bc <<< "$p - 1") $(bc <<< "$q - 1")
totient=$lcm
echo "Done"
echo -n "Choosing public exponent..."
#choose e: 	1 < e < totient, e coprime to totient (e and totient share no factors other than one)
bits=$(bc -l <<< "(l($totient) / l(2)) + 1")
maxBits=$(($(cut -d "." -f 1 <<< $bits) - 1))
e=$(openssl prime -generate -bits $maxBits)
echo "Done"
modInverse () 
{
	for i in $(seq 1 $(($2+1))); do
		if [ $(bc <<< "($1 * $i) % $2") -eq 1 ]; then
			inverse=$i
		fi
	done
}


#compute d:	d = e-1 (mod totient)
echo -n "Calculating modular inverse..."
modInverse $e $lcm
d=$inverse
echo "Done"

echo "Key Generation finished"
echo "Saving key to file"

#public key is n, e
echo "public key:" $n $e > $1."pub"

#private key is d
echo "private key:" $d > $1
chmod 600 $1

